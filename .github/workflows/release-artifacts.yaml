name: Release ML Artifacts

on:
  push:
    tags: [ "v*.*.*" ]   # ex: v1.0.0

env:
  ARTIFACTS_BUCKET: ml-artifacts-048153623156 # ajuste
  AWS_REGION: us-east-1                       # ajuste
  CDN_DOMAIN: d1y8lqisovngwq.cloudfront.net   # se usar manifest

permissions:
  contents: read
  id-token: write

jobs:
  # Extrai a versão da tag e define nomes de artifacts para encadear entre jobs
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.v.outputs.version }}
      trained_artifact: ${{ steps.names.outputs.trained_artifact }}
      labels_artifact:  ${{ steps.names.outputs.labels_artifact }}
      out_artifact:     ${{ steps.names.outputs.out_artifact }}
      pip-cache-key:    ${{ steps.cache-restore.outputs.cache-primary-key }}

    steps:
      - name: Version from tag (strip leading v)
        id: v
        run: echo "version=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"

      - name: Make artifact names
        id: names
        run: |
          echo "trained_artifact=trained-${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "labels_artifact=labels-${GITHUB_SHA}"   >> "$GITHUB_OUTPUT"
          echo "out_artifact=out-${GITHUB_SHA}"         >> "$GITHUB_OUTPUT"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip deps
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies (once)
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  train:
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.prepare.outputs.pip-cache-key }}

      - name: Train model
        run: |
          python -m scripts.train
          test -f models/trained/model_trained.h5
          test -f models/trained/model_labels.txt

      - name: Upload trained model (.h5)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.trained_artifact }}
          path: models/trained/model_trained.h5
          if-no-files-found: error
          retention-days: 7

      - name: Upload labels (.txt)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.labels_artifact }}
          path: models/trained/model_labels.txt
          if-no-files-found: error
          retention-days: 7

  test:
    runs-on: ubuntu-latest
    needs: [prepare, train]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.prepare.outputs.pip-cache-key }}

      - name: Download trained model
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.trained_artifact }}
          path: models/trained

      - name: Download labels
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.labels_artifact }}
          path: models/trained

      - name: Run inference tests
        run: |
          ls -la models/trained
          python -m scripts.test_inference

      - name: Upload test report (opcional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ github.run_number }}
          path: reports/**
          retention-days: 7

  convert:
    runs-on: ubuntu-latest
    needs: [prepare, test]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Restore pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ needs.prepare.outputs.pip-cache-key }}

      - name: Download trained model + labels
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.trained_artifact }}
          path: models/trained

      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.labels_artifact }}
          path: models/trained

      - name: Convert to Android (.tflite) and iOS (.mlpackage)
        run: |
          python -m scripts.convert

          test -f models/artifactory/android/model.tflite
          test -d models/artifactory/ios/Model.mlpackage

      - name: Assemble versioned release folder
        run: |
          mkdir -p out/${{ needs.prepare.outputs.version }}/Android
          mkdir -p out/${{ needs.prepare.outputs.version }}/iOS

          cp models/trained/model.h5          out/${{ needs.prepare.outputs.version }}/model.h5
          cp models/trained/labels.txt        out/${{ needs.prepare.outputs.version }}/labels.txt
          cp models/artifactory/android/model.tflite \
             out/${{ needs.prepare.outputs.version }}/Android/model.tflite
          # mlpackage é um diretório; preserve estrutura
          cp -R models/artifactory/ios/Model.mlpackage \
             out/${{ needs.prepare.outputs.version }}/iOS/Model.mlpackage

          tree -a out || find out -maxdepth 3 -type f -print

      - name: Upload assembled 'out' artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.out_artifact }}
          path: out/**
          if-no-files-found: error
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, convert]
    environment: production
    steps:
      - name: Download assembled 'out' artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.out_artifact }}
          path: out

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::048153623156:role/github-ml-artifacts-deploy   # ajuste
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3 (keeps directory structure)
        run: |
          aws s3 cp "out/${{ needs.prepare.outputs.version }}/" \
            "s3://${ARTIFACTS_BUCKET}/${MODEL_NAME}/${{ needs.prepare.outputs.version }}/" \
            --recursive --only-show-errors
